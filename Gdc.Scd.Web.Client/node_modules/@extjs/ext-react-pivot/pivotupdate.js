
/**
 * 
 * This class defines an update operation that occurs on records belonging to a
 * Ext.pivot.result.Base.
 * 
 * This class should be extended to provide the update operation algorithm.
 * 
 * How does such an update work?
 * 
 * The Ext.pivot.result.Base contains an array of records that participate
 * in the result aggregation. The value is used to update all these records on the
 * dataIndex field.
 * 
 * **Note:** These updaters are used by the Ext.pivot.plugin.RangeEditor plugin.
 * 
 */
export const base = 'base';

/**
 * 
 * This updater increments all records found on the Ext.pivot.result.Base
 * using the specified value.
 * 
 * Let's say that the result object contains the following records (each record is a
 * Ext.data.Model in fact but we use json representation for this example):
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 100 },
 *          { product: 'Tablet', country: 'USA', order: 200 }
 *      ]
 * 
 * And we want to increment all orders by a fixed value of 50. This is how the updater config looks like:
 * 
 *      {
 *          type: 'increment',
 *          leftKey: resultLeftKey,
 *          topKey: resultTopKey,
 *          matrix: matrix,
 *          dataIndex: 'order',
 *          value: 50
 *      }
 * 
 * And this is how the records look after the update:
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 150 },
 *          { product: 'Tablet', country: 'USA', order: 250 }
 *      ]
 * 
 */
export const increment = 'increment';

/**
 * 
 * This updater overwrites the value on all records found on the Ext.pivot.result.Base.
 * 
 * Let's say that the result object contains the following records (each record is a
 * Ext.data.Model in fact but we use json representation for this example):
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 100 },
 *          { product: 'Tablet', country: 'USA', order: 200 }
 *      ]
 * 
 * And we want all orders to have the same value of 250. This is how the updater config looks like:
 * 
 *      {
 *          type: 'overwrite',
 *          leftKey: resultLeftKey,
 *          topKey: resultTopKey,
 *          matrix: matrix,
 *          dataIndex: 'order',
 *          value: 250
 *      }
 * 
 * And this is how the records look after the update:
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 250 },
 *          { product: 'Tablet', country: 'USA', order: 250 }
 *      ]
 * 
 */
export const overwrite = 'overwrite';

/**
 * 
 * This updater changes all records found on the Ext.pivot.result.Base
 * using the specified value as a percentage.
 * 
 * Let's say that the result object contains the following records (each record is a
 * Ext.data.Model in fact but we use json representation for this example):
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 100 },
 *          { product: 'Tablet', country: 'USA', order: 200 }
 *      ]
 * 
 * And we want to increase all orders by 150%. This is how the updater config looks like:
 * 
 *      {
 *          type: 'percentage',
 *          leftKey: resultLeftKey,
 *          topKey: resultTopKey,
 *          matrix: matrix,
 *          dataIndex: 'order',
 *          value: 150
 *      }
 * 
 * And this is how the records look after the update:
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 150 },
 *          { product: 'Tablet', country: 'USA', order: 300 }
 *      ]
 * 
 */
export const percentage = 'percentage';

/**
 * 
 * This updater evenly distributes the value across all records found on the Ext.pivot.result.Base.
 * 
 * Let's say that the result object contains the following records (each record is a
 * Ext.data.Model in fact but we use json representation for this example):
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 100 },
 *          { product: 'Tablet', country: 'USA', order: 200 }
 *      ]
 * 
 * And we want to evenly distribute the value 300 to all orders. This is how the updater config looks like:
 * 
 *      {
 *          type: 'uniform',
 *          leftKey: resultLeftKey,
 *          topKey: resultTopKey,
 *          matrix: matrix,
 *          dataIndex: 'order',
 *          value: 300
 *      }
 * 
 * And this is how the records look after the update:
 * 
 *      [
 *          { product: 'Phone', country: 'USA', order: 150 },
 *          { product: 'Tablet', country: 'USA', order: 150 }
 *      ]
 * 
 */
export const uniform = 'uniform';