
export const auto = 'auto';

/**
 * 
 * Box is a superclass for the two box layouts:
 * 
 * * Ext.layout.HBox
 * * Ext.layout.VBox
 * 
 * Box itself is never used directly, but its subclasses provide flexible arrangement of child components
 * inside a Ext.Container.
 * 
 * ## Horizontal Box
 * 
 * HBox allows you to easily lay out child components horizontally. It can size items based on a fixed width or a
 * fraction of the total width available, enabling you to achieve flexible layouts that expand or contract to fill the
 * space available.
 * 
 * See the Ext.layout.HBox for more information on using hboxes.
 * 
 * ## Vertical Box
 * 
 * VBox allows you to easily lay out child components vertically. It can size items based on a fixed height or a
 * fraction of the total height available, enabling you to achieve flexible layouts that expand or contract to fill the
 * space available.
 * 
 * See the Ext.layout.VBox for more information on using vboxes.
 * 
 */
export const box = 'box';

export const card = 'card';

export const carousel = 'carousel';

/**
 * This layout is used to center contents within a container.
 * 
 * Example usage:
 * 
 *      // The content component is centered inside the panel
 * 
 *     <Panel title='Center Layout'
 *            layout='center'
 *            height='200'
 *            width='200'>
 *         <Panel width='75%' height='75%'>
 *             Some content
 *         </Panel>
 *     </Panel>
 * 
 */
export const center = 'center';

export const float = 'float';

/**
 * Form layout renders a single column of form fields, all with the same
 * width.  The default behavior is to size all labels to the
 * width of the label with the longest text, but the width of the labels can also be
 * configured.
 * 
 * The following example uses label-auto-widthing to size all labels to the width of the
 * largest label.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react';
 *     import { Button, FormPanel, TextField } from '@extjs/ext-react';
 * 
 *     export default class myExample extends Component {
 *         render() {
 *             return (
 *                 <FormPanel title="Form Panel">
 *                     <TextField label="First Name"/>
 *                     <TextField label="Last Name"/>
 *                     <TextField label="Account Number"/>
 *                     <Button text="Submit">
 *                 </FormPanel>
 *             )
 *         }
 *     }
 * 
 */
export const form = 'form';

/**
 * 
 * The HBox (short for horizontal box) layout makes it easy to position items horizontally in a
 * Ext.Container. It can size items based on a fixed width or a fraction of the total width
 * available.
 * 
 * For example, an email client might have a list of messages pinned to the left, taking say one third of the available
 * width, and a message viewing panel in the rest of the screen. We can achieve this with hbox layout's *flex* config:
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react';
 *     import { Container, Panel } from '@extjs/ext-react';
 * 
 *     export default class myExample extends Component {
 *         render() {
 *             return (
 *                 <Container layout="hbox">
 *                     <Panel title="Inner Panel 1" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 2" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                 </Container>
 *             )
 *         }
 *     }
 * 
 * This will give us two boxes - one that's one third of the available width, the other being two thirds of the
 * available width.
 * 
 * We can also specify fixed widths for child items, or mix fixed widths and flexes. For example, here we have 3 items
 * - one on each side with flex: 1, and one in the center with a fixed width of 100px:
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react';
 *     import { Container, Panel } from '@extjs/ext-react';
 * 
 *     export default class myExample extends Component {
 *         render() {
 *             return (
 *                 <Container layout="hbox">
 *                     <Panel title="Inner Panel 1" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 2" width="100">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 3" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                 </Container>
 *             )
 *         }
 *     }
 * 
 */
export const hbox = 'hbox';

/**
 * The VBox (short for vertical box) layout makes it easy to position items vertically in a
 * Ext.Container. It can size items based on a fixed height or a fraction
 * of the total height available.
 * 
 * For example, let's say we want a banner to take one third of the available height, and
 * an information panel in the rest of the screen. We can achieve this with vbox layout's
 * *flex* config:
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react';
 *     import { Container, Panel } from '@extjs/ext-react';
 * 
 *     export default class myExample extends Component {
 *         render() {
 *             return (
 *                 <Container layout="vbox">
 *                     <Panel title="Inner Panel 1" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 2" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                 </Container>
 *             )
 *         }
 *     }
 * 
 * This will give us two boxes - one that's one third of the available height, the other
 * being two thirds of the available height.
 * 
 * We can also specify fixed heights for child items, or mix fixed heights and flexes. For
 * example, here we have 3 items - one at the top and bottom with flex: 1, and one in the
 * center with a fixed width of 100px:
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react';
 *     import { Container, Panel } from '@extjs/ext-react';
 * 
 *     export default class myExample extends Component {
 *         render() {
 *             return (
 *                 <Container layout="vbox">
 *                     <Panel title="Inner Panel 1" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 2" height="100">
 *                         This is the inner panel content
 *                     </Panel>
 *                     <Panel title="Inner Panel 3" flex="1">
 *                         This is the inner panel content
 *                     </Panel>
 *                 </Container>
 *             )
 *         }
 *     }
 * 
 */
export const vbox = 'vbox';