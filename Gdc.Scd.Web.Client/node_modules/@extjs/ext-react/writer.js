
/**
 * 
 * This class is used to write Ext.data.Model data to the server in a JSON format.
 * The allowSingle configuration can be set to false to force the records to always
 * be encoded in an array, even if there is only a single record being sent.
 * 
 */
export const json = 'json';

/**
 * 
 * Base Writer class used by most subclasses of Ext.data.proxy.Server. This class
 * is responsible for taking a set of Ext.data.operation.Operation objects and a
 * Ext.data.Request object and modifying that request based on the Operations.
 * 
 * For example a Ext.data.writer.Json would format the Operations and their
 * Ext.data.Model instances based on the config options passed to the JsonWriter's
 * constructor.
 * 
 * Writers are not needed for any kind of local storage - whether via a
 * Ext.data.proxy.WebStorage (see
 * Ext.data.proxy.LocalStorage and
 * Ext.data.proxy.SessionStorage)
 * or just in memory via a Ext.data.proxy.Memory.
 * 
 * # Dates
 * 
 * Before sending dates to the server, they can be formatted using an Ext.Date
 * format. These formats can be specified both on the field and the writer itself. In terms
 * of precedence, from highest to lowest:
 * 
 * - Writer.dateFormat The writer `dateFormat` will always have the
 *   highest precedence.
 * - Ext.data.field.Date#dateWriteFormat The `dateWriteFormat` given to the field
 *   instance. This is handled by Ext.data.field.Date#method-serialize.
 * - Field.dateFormat This is handled by the field's
 *   `serialize` method.
 * - Field.dateReadFormat Also handled by the
 *   field's `serialize` method.
 * 
 */
export const base = 'base';

/**
 * 
 * This class is used to write Ext.data.Model data to the server in an XML format.
 * The documentRoot property is used to specify the root element in the XML document.
 * The record option is used to specify the element name for each record that will make up the XML document.
 * 
 */
export const xml = 'xml';