
/**
 * This plugin provides a way to map actions to swipe gesture on all list items.
 * 
 */
export const listswiper = 'listswiper';

/**
 * 
 * A plugin which is a Ext.tip.ToolTip which shows itself upon mouseover of a DataView item.
 * 
 * The associated Ext.data.Model is passed into the setData method just before
 * the tip is shown. The record is stored in the `record` property.
 * 
 */
export const dataviewtip = 'dataviewtip';

/**
 * Adds a Load More button at the bottom of the list. When the user presses this button,
 * the next page of data will be loaded into the store and appended to the List.
 * 
 * By specifying `autoPaging: true`, an 'infinite scroll' effect can be achieved,
 * i.e., the next page of content will load automatically when the user scrolls near the
 * bottom of the list.
 * 
 * ## Example
 * 
 *     Ext.create('Ext.dataview.List', {
 * 
 *         store: Ext.create('TweetStore'),
 * 
 *         plugins: [
 *             {
 *                 type: 'listpaging',
 *                 autoPaging: true
 *             }
 *         ],
 * 
 *         itemTpl: [
 *             '<img src="{profile_image_url}" />',
 *             '<div class="tweet">{text}</div>'
 *         ]
 *     });
 * 
 */
export const listpaging = 'listpaging';

/**
 * 
 * The SortableList plugin gives your list items the ability to be reordered by tapping and
 * dragging elements within the item.
 * 
 * The list-sortablehandle is not added to your tpl by default, so it's important that you
 * manually include it. It's also important to recognize that list-items are not draggable
 * themselves.  You must add an element to the itemTpl for it to be dragged.
 * 
 * The CSS for MyStyle can be anything that creates an element to tap and drag.  For this
 * example we made a simple rectangle like so:
 * 
 *      .myStyle{
 *          width:30px;
 *          height:20px;
 *          background:gray;
 *          float:left;
 *      }
 * 
 * Note: You must have infinite set to 'true' when using the SortableList plugin.
 * 
 */
export const sortablelist = 'sortablelist';

/**
 * 
 * This Ext.Component#cfg!plugins adds pull to refresh functionality to the
 * Ext.dataview.List component.
 * 
 */
export const pullrefresh = 'pullrefresh';

/**
 * 
 * The Cell Editing plugin utilizes an `Ext.Editor` to provide inline cell editing for
 * grid cells.  Each `Column` with an `editable` prop value of true will become editable when the user
 * double-clicks on a cell in the column.  By default a `TextField` is used as the editor.  You
 * can substitute a different editor by adding a subclass of `Ext.field.Field` as a child of the `Column`.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column, SelectField } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.CellEditing');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     height="275"
 *                     store={this.store}
 *                     plugins={['cellediting']}
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Talent"
 *                         dataIndex="talent"
 *                         flex={1}
 *                         editable
 *                     >
 *                         <SelectField
 *                             options={[
 *                                 { text: 'All', value: 'All' },
 *                                 { text: 'Archery', value: 'Archery' },
 *                                 { text: 'Speedster', value: 'Speedster' },
 *                                 { text: 'Weapons', value: 'Weapons' },
 *                                 { text: 'Willpower', value: 'Willpower' }
 *                             ]}
 *                        />
 *                     </Column>
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 */
export const gridcellediting = 'gridcellediting';

/**
 * 
 * The Cell Editing plugin utilizes an `Ext.Editor` to provide inline cell editing for
 * grid cells.  Each `Column` with an `editable` prop value of true will become editable when the user
 * double-clicks on a cell in the column.  By default a `TextField` is used as the editor.  You
 * can substitute a different editor by adding a subclass of `Ext.field.Field` as a child of the `Column`.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column, SelectField } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.CellEditing');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     height="275"
 *                     store={this.store}
 *                     plugins={['cellediting']}
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Talent"
 *                         dataIndex="talent"
 *                         flex={1}
 *                         editable
 *                     >
 *                         <SelectField
 *                             options={[
 *                                 { text: 'All', value: 'All' },
 *                                 { text: 'Archery', value: 'Archery' },
 *                                 { text: 'Speedster', value: 'Speedster' },
 *                                 { text: 'Weapons', value: 'Weapons' },
 *                                 { text: 'Willpower', value: 'Willpower' }
 *                             ]}
 *                        />
 *                     </Column>
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 */
export const cellediting = 'cellediting';

/**
 * 
 * The Column Resizing plugin allows users to adjust the width of the grid columns to suit
 * their needs.  It is automatically added to all grid columns.
 * 
 */
export const columnresizing = 'columnresizing';

/**
 * 
 * The Column Resizing plugin allows users to adjust the width of the grid columns to suit
 * their needs.  It is automatically added to all grid columns.
 * 
 */
export const gridcolumnresizing = 'gridcolumnresizing';

/**
 * 
 * The Editable plugin adds row-level editing to any Grid. Editing begins by double-tapping a row.
 * This can be set to any event, which we'll discuss below. The editor consists of a small
 * positioned dialog that be shown on the right side of your viewport.
 * 
 * There is a button to save or cancel all changes for the edit in the toolbar, and the
 * row is deletable by default.
 * 
 * A Column is included in the editor dialog if it has a editable prop set to true.
 * By default a `TextField` is used as the editor.  You can substitute a different editor by
 * adding a subclass of `Ext.field.Field` as a child of the `Column`.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column, SelectField } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.Editable');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     height="275"
 *                     store={this.store}
 *                     plugins={['grideditable']}
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                         editable
 *                     />
 *                     <Column
 *                         text="Talent"
 *                         dataIndex="talent"
 *                         flex={1}
 *                         editable
 *                     >
 *                         <SelectField
 *                             options={[
 *                                 { text: 'All', value: 'All' },
 *                                 { text: 'Archery', value: 'Archery' },
 *                                 { text: 'Speedster', value: 'Speedster' },
 *                                 { text: 'Weapons', value: 'Weapons' },
 *                                 { text: 'Willpower', value: 'Willpower' }
 *                             ]}
 *                        />
 *                     </Column>
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 */
export const grideditable = 'grideditable';

/**
 * 
 * The Paging Toolbar is a specialized toolbar that is
 * bound to a `Ext.data.Store` and provides automatic paging control.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.PagingToolbar');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             pageSize: 3,
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     height="180"
 *                     store={this.store}
 *                     plugins={['pagingtoolbar']}
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Talent"
 *                         dataIndex="talent"
 *                         flex={1}
 *                     />
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 */
export const pagingtoolbar = 'pagingtoolbar';

/**
 * 
 * The Paging Toolbar is a specialized toolbar that is
 * bound to a `Ext.data.Store` and provides automatic paging control.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.PagingToolbar');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             pageSize: 3,
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'talent': 'Speedster'},
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery'},
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'talent': 'All'},
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert'},
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'talent': 'Willpower'  }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     height="180"
 *                     store={this.store}
 *                     plugins={['pagingtoolbar']}
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Talent"
 *                         dataIndex="talent"
 *                         flex={1}
 *                     />
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 */
export const gridpagingtoolbar = 'gridpagingtoolbar';

/**
 * 
 * The Row Expander plugin provides an "expander" column to give the user the ability to show
 * or hide the Ext.grid.Row#cfg!body of each row.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.RowExpander');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = Ext.create('Ext.data.Store', {
 *             data: [
 *                 { 'fname': 'Barry',  'lname': 'Allen', 'title': 'Director of Engineering', 'department': 'Engineering'  },
 *                 { 'fname': 'Oliver', 'lname': 'Queen', 'title': 'Senior Developer', 'department': 'Engineering'  },
 *                 { 'fname': 'Kara',   'lname': 'Zor-El', 'title': 'Senior Marketing Manager', 'department': 'Marketing'  },
 *                 { 'fname': 'Helena', 'lname': 'Bertinelli', 'title': 'Marketing Associate', 'department': 'Marketing'  },
 *                 { 'fname': 'Hal',    'lname': 'Jordan', 'title': 'Product Manager', 'department': 'Marketing'  }
 *             ],
 *             sorters: [
 *                 { property: 'lname' }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     store={this.store}
 *                     fullscreen
 *                     plugins={['rowexpander']}
 *                     itemConfig={{
 *                         body: {
 *                             tpl: (record) => (
 *                                 <div>
 *                                     <img height="100" src="http://www.sencha.com/assets/images/sencha-avatar-64x64.png"/>
 *                                     <div style={styles.name}>{record.fname} {record.lname}</div>
 *                                     <div style={styles.title}>{record.title}</div>
 *                                     <div style={styles.department}>{record.department}</div>
 *                                 </div>
 *                             )
 *                         }
 *                     }}
 *                     variableHeights
 *                 >
 *                     <Column
 *                         text="First Name"
 *                         dataIndex="fname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Last Name"
 *                         dataIndex="lname"
 *                         flex={1}
 *                     />
 *                     <Column
 *                         text="Department"
 *                         dataIndex="department"
 *                         flex={1}
 *                     />
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 *     const styles = {
 *         name: {
 *             fontSize: '16px',
 *             marginBottom: '5px'
 *         },
 *         department: {
 *             fontWeight: 'bold'
 *         },
 *         title: {
 *             fontWeight: 'bold',
 *             fontSize: '14px'
 *         }
 *     }
 * 
 */
export const rowexpander = 'rowexpander';

/**
 * 
 * The RowOperations plugin enables user to select rows in a Ext.grid.Grid and
 * then perform an operation (e.g. Delete) on them. This plugin adds a "Select" button
 * to the grid's title to start the selection process. This button is replaced by "Done"
 * while in selection mode. When selecting an extra `operation` button is displayed. By
 * default this button can be used to delete records.
 * 
 * In addition, this plugin will ensure that the Ext.grid.Grid#cfg!selectable
 * selection method is enabled. The selectionColumn config of this plugin can be
 * used to control this configuration.
 * 
 * Customizing the RowOperations plugin to provide operations other then "Delete" can
 * be done with the `operation` config:
 * 
 *      @example packages = [reactor]
 *      import React, { Component } from 'react'
 *      import { Grid, Column } from '@extjs/ext-react';
 * 
 *      Ext.require('Ext.grid.plugin.RowOperations');
 * 
 *      export default class MyExample extends Component {
 * 
 *          store = new Ext.data.Store({
 *              data: [
 *                  { 'fname': 'Barry', 'lname': 'Allen', 'talent': 'Speedster' },
 *                  { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery' },
 *                  { 'fname': 'Kara', 'lname': 'Zor-El', 'talent': 'All' },
 *                  { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert' },
 *                  { 'fname': 'Hal', 'lname': 'Jordan', 'talent': 'Willpower' }
 *              ]
 *          });
 * 
 *          render() {
 *              return (
 *                  <Grid
 *                      ref={grid => this.grid = grid}
 *                      store={this.store}
 *                      title="People"
 *                      fullscreen
 *                      plugins={{
 *                          rowoperations: {
 *                              operation: {
 *                                  text: "Archive",
 *                                  handler: this.archiveSelected,
 *                                  ui: "alt"
 *                              }
 *                          }
 *                      }}
 *                  >
 *                      <Column text="First Name" dataIndex="fname" flex="1" />
 *                      <Column text="Last Name" dataIndex="lname" flex="1" />
 *                      <Column text="Talent" dataIndex="talent" flex="1" />
 *                  </Grid>
 *              )
 *          }
 * 
 *          archiveSelected = () => {
 *              const selected = this.grid.getSelected().items
 *                  .map(record => `${record.get('fname')} ${record.get('lname')}`)
 *                  .join(', ');
 * 
 *              console.log(`Archived ${selected}`)
 *          }
 *      }
 * 
 * Since the `operation` is a Ext.Button, multiple operations can easily be
 * provided using the button's  Ext.Button#cfg!menu.
 * 
 */
export const rowoperations = 'rowoperations';

/**
 * 
 * This Ext.grid.Grid plugin manages a bottom-docked summary row.
 * 
 * By default, the column's Ext.grid.column.Column#cfg!dataIndex is used
 * to read from the record as controlled by
 * the model's summary definition. To use a different
 * field, the summaryDataIndex can be
 * specified.
 * 
 * The summary config can be used to perform
 * column-specific summarization. The `summary` config uses one of the registered summary
 * types (see below). Custom summary types can be defined, or a column-specific algorithm
 * can be provided with a Ext.grid.column.Column#cfg!summaryRenderer.
 * 
 * ## Summary Types
 * 
 * The `summary` type can be one of the predefined summary types:
 * 
 * + Ext.data.summary.Average
 * + Ext.data.summary.Count
 * + Ext.data.summary.Max
 * + Ext.data.summary.Min
 * + Ext.data.summary.Sum
 * 
 * 
 *      @example packages=[reactor]
 *      import React, { Component } from 'react'
 *      import { Grid, Column } from '@extjs/ext-react';
 * 
 *      Ext.require('Ext.grid.plugin.Summary');
 * 
 *      export default class MyExample extends Component {
 * 
 *          store = new Ext.data.Store({
 *              data: [
 *                  { 'fname': 'Barry', 'lname': 'Allen', 'talent': 'Speedster', 'wins': 150 },
 *                  { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery', 'wins': 27 },
 *                  { 'fname': 'Kara', 'lname': 'Zor-El', 'talent': 'All', 'wins': 75 },
 *                  { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert', 'wins': 7 },
 *                  { 'fname': 'Hal', 'lname': 'Jordan', 'talent': 'Willpower', 'wins': 198 }
 *              ]
 *          });
 * 
 *          render() {
 *              return (
 *                  <Grid
 *                      height="275"
 *                      store={this.store}
 *                      plugins={['gridsummaryrow']}
 *                  >
 *                      <Column text="First Name" dataIndex="fname" flex={1} />
 *                      <Column text="Last Name" dataIndex="lname" flex={1} />
 *                      <Column text="Talent" dataIndex="talent" flex={1} />
 *                      <Column text="Wins" dataIndex="wins" flex={1} summary="sum" />
 *                  </Grid>
 *              )
 *          }
 *      }
 * 
 */
export const summaryrow = 'summaryrow';

/**
 * 
 * This Ext.grid.Grid plugin manages a bottom-docked summary row.
 * 
 * By default, the column's Ext.grid.column.Column#cfg!dataIndex is used
 * to read from the record as controlled by
 * the model's summary definition. To use a different
 * field, the summaryDataIndex can be
 * specified.
 * 
 * The summary config can be used to perform
 * column-specific summarization. The `summary` config uses one of the registered summary
 * types (see below). Custom summary types can be defined, or a column-specific algorithm
 * can be provided with a Ext.grid.column.Column#cfg!summaryRenderer.
 * 
 * ## Summary Types
 * 
 * The `summary` type can be one of the predefined summary types:
 * 
 * + Ext.data.summary.Average
 * + Ext.data.summary.Count
 * + Ext.data.summary.Max
 * + Ext.data.summary.Min
 * + Ext.data.summary.Sum
 * 
 * 
 *      @example packages=[reactor]
 *      import React, { Component } from 'react'
 *      import { Grid, Column } from '@extjs/ext-react';
 * 
 *      Ext.require('Ext.grid.plugin.Summary');
 * 
 *      export default class MyExample extends Component {
 * 
 *          store = new Ext.data.Store({
 *              data: [
 *                  { 'fname': 'Barry', 'lname': 'Allen', 'talent': 'Speedster', 'wins': 150 },
 *                  { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery', 'wins': 27 },
 *                  { 'fname': 'Kara', 'lname': 'Zor-El', 'talent': 'All', 'wins': 75 },
 *                  { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert', 'wins': 7 },
 *                  { 'fname': 'Hal', 'lname': 'Jordan', 'talent': 'Willpower', 'wins': 198 }
 *              ]
 *          });
 * 
 *          render() {
 *              return (
 *                  <Grid
 *                      height="275"
 *                      store={this.store}
 *                      plugins={['gridsummaryrow']}
 *                  >
 *                      <Column text="First Name" dataIndex="fname" flex={1} />
 *                      <Column text="Last Name" dataIndex="lname" flex={1} />
 *                      <Column text="Talent" dataIndex="talent" flex={1} />
 *                      <Column text="Wins" dataIndex="wins" flex={1} summary="sum" />
 *                  </Grid>
 *              )
 *          }
 *      }
 * 
 */
export const gridsummaryrow = 'gridsummaryrow';

/**
 * 
 * This Ext.grid.Grid plugin manages a bottom-docked summary row.
 * 
 * By default, the column's Ext.grid.column.Column#cfg!dataIndex is used
 * to read from the record as controlled by
 * the model's summary definition. To use a different
 * field, the summaryDataIndex can be
 * specified.
 * 
 * The summary config can be used to perform
 * column-specific summarization. The `summary` config uses one of the registered summary
 * types (see below). Custom summary types can be defined, or a column-specific algorithm
 * can be provided with a Ext.grid.column.Column#cfg!summaryRenderer.
 * 
 * ## Summary Types
 * 
 * The `summary` type can be one of the predefined summary types:
 * 
 * + Ext.data.summary.Average
 * + Ext.data.summary.Count
 * + Ext.data.summary.Max
 * + Ext.data.summary.Min
 * + Ext.data.summary.Sum
 * 
 * 
 *      @example packages=[reactor]
 *      import React, { Component } from 'react'
 *      import { Grid, Column } from '@extjs/ext-react';
 * 
 *      Ext.require('Ext.grid.plugin.Summary');
 * 
 *      export default class MyExample extends Component {
 * 
 *          store = new Ext.data.Store({
 *              data: [
 *                  { 'fname': 'Barry', 'lname': 'Allen', 'talent': 'Speedster', 'wins': 150 },
 *                  { 'fname': 'Oliver', 'lname': 'Queen', 'talent': 'Archery', 'wins': 27 },
 *                  { 'fname': 'Kara', 'lname': 'Zor-El', 'talent': 'All', 'wins': 75 },
 *                  { 'fname': 'Helena', 'lname': 'Bertinelli', 'talent': 'Weapons Expert', 'wins': 7 },
 *                  { 'fname': 'Hal', 'lname': 'Jordan', 'talent': 'Willpower', 'wins': 198 }
 *              ]
 *          });
 * 
 *          render() {
 *              return (
 *                  <Grid
 *                      height="275"
 *                      store={this.store}
 *                      plugins={['gridsummaryrow']}
 *                  >
 *                      <Column text="First Name" dataIndex="fname" flex={1} />
 *                      <Column text="Last Name" dataIndex="lname" flex={1} />
 *                      <Column text="Talent" dataIndex="talent" flex={1} />
 *                      <Column text="Wins" dataIndex="wins" flex={1} summary="sum" />
 *                  </Grid>
 *              )
 *          }
 *      }
 * 
 */
export const gridsummary = 'gridsummary';

/**
 * 
 * The ViewOptions plugin produces a menu that slides in from the right
 * (by default) when you longpress on the grid headers. The menu displays the column
 * header names which represents the order of the grid's columns. This allows users to
 * easily reorder the grid's columns by reordering the rows. Items may be dragged by
 * grabbing the handle on the left side of the row and moving the item vertically.
 * 
 * Once the columns are ordered to your liking, you may then close the menu by tapping the
 * "Done" button.
 * 
 *     @example packages=[reactor]
 *     import React, { Component } from 'react'
 *     import { Grid, Column } from '@extjs/ext-react';
 * 
 *     Ext.require('Ext.grid.plugin.ViewOptions');
 * 
 *     export default class MyExample extends Component {
 * 
 *         store = new Ext.data.Store({
 *             data: [
 *                 { "name": "Lisa", "email": "lisa@simpsons.com", "phone": "555-111-1224" },
 *                 { "name": "Bart", "email": "bart@simpsons.com", "phone": "555-222-1234" },
 *                 { "name": "Homer", "email": "home@simpsons.com", "phone": "555-222-1244" },
 *                 { "name": "Marge", "email": "marge@simpsons.com", "phone": "555-222-1254" }
 *             ]
 *         });
 * 
 *         render() {
 *             return (
 *                 <Grid
 *                     layout="fit"
 *                     store={this.store}
 *                     plugins={[ 'gridviewoptions' ]}
 *                 >
 *                     <Column text="Name" dataIndex="name" flex={1} sortable={false} />
 *                     <Column text="Email" dataIndex="email" flex={1} />
 *                     <Column text="Phone" dataIndex="phone" flex={1} />
 *                 </Grid>
 *             )
 *         }
 *     }
 * 
 * Developers may modify the menu and its contents by overriding sheet and
 * columnList respectively.
 * 
 */
export const gridviewoptions = 'gridviewoptions';

/**
 * A plugin for use in grids which use the spreadsheet selection model,
 * with extensible configured as `true` or `"y"`, meaning that
 * the selection may be extended up or down using a draggable extension handle.
 * 
 * This plugin propagates values from the selection into the extension area.
 * 
 * If just *one* row is selected, the values in that row are replicated unchanged into the extension area.
 * 
 * If more than one row is selected, the two rows closest to the selected block are taken to provide a numeric
 * difference, and that difference is used to calculate the sequence of values all the way into the extension area.
 * 
 */
export const selectionreplicator = 'selectionreplicator';

/**
 * This plugin calls a callback whenever the mouse enters or leaves descendant
 * elements of its host component identified by a delegate
 * query selector string.
 * 
 * This is useful for components which render arbitrary and transient child elements
 * such as DataViews and Charts. It allows notification of mousenter events from
 * child nodes without having to add  listeners to each child element.
 * 
 */
export const mouseenter = 'mouseenter';

/**
 * This plugin can be added to component instances to process a `responsiveConfig`. For
 * example:
 * 
 *      Ext.create({
 *          xtype: 'panel',
 *          layout: 'hbox',
 * 
 *          items: [{
 *              xtype: 'component',
 *              plugins: 'responsive',
 * 
 *              responsiveConfig: {
 *                  'width < 800': {
 *                      hidden: true
 *                  },
 * 
 *                  'width >= 800': {
 *                      hidden: false
 *                  }
 *              }
 *          },
 *          ...]
 *      });
 * 
 * For details see `responsiveConfig`.
 * 
 */
export const responsive = 'responsive';