
/**
 * Tracks what records are currently selected in a databound widget. This class is used by
 * dataview and all subclasses.
 * 
 * If a {Ext.data.virtual.Store virtual store} is being used, then record *indices* are stored
 * as the selection, not a collection of records.
 * 
 * If selecting records, the selection model with an
 * Ext.util.Collection to use to store the selected records. This can be useful when
 * other objects need access to the current selection. In particular, ComboBox uses this
 * technique to track which records are selected and form the value of the ComboBox field.
 * 
 */
export const dataview = 'dataview';

/**
 * A selection model for Ext.grid.Grid which allows you to select data in
 * a spreadsheet-like manner.
 * 
 * Supported features:
 * 
 *  - Single / Range / Multiple individual row selection.
 *  - Single / Range cell selection.
 *  - Column selection by click selecting column headers.
 *  - Select / deselect all by clicking in the top-left, header.
 *  - Adds row number column to enable row selection.
 *  - Optionally you can enable row selection using checkboxes
 * 
 * # Using Ext.data.virtual.Stores
 * It is very important to remember that a Ext.data.virtual.Store does *not* contain the
 * full dataset. The purpose of a VirtualStore is to only hold in the client, a range of
 * pages from the dataset that corresponds with what is currently visible in the grid
 * (plus a few pages above and below the visible range to allow fast scrolling).
 * 
 * When using "select all" rows and a VirtualStore, an `allSelected` flag is set, and so all
 * records which are read into the client side cache will thenceforth be selected, and will
 * be rendered as selected in the grid.
 * 
 * *But records which have not been read into the cache will obviously not be available
 * when interrogating selected records. What is stored as being selected is row index ranges.*
 * 
 */
export const grid = 'grid';