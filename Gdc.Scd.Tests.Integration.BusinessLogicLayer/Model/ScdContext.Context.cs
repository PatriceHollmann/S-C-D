//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gdc.Scd.Tests.Integration.BusinessLogicLayer.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ScdEntities : DbContext
    {
        public ScdEntities()
            : base("name=ScdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Availability> Availabilities { get; set; }
        public virtual DbSet<Duration> Durations { get; set; }
        public virtual DbSet<ProActiveSla> ProActiveSlas { get; set; }
        public virtual DbSet<ReactionTime> ReactionTimes { get; set; }
        public virtual DbSet<ReactionTime_Avalability> ReactionTime_Avalability { get; set; }
        public virtual DbSet<ReactionTime_ReactionType> ReactionTime_ReactionType { get; set; }
        public virtual DbSet<ReactionTime_ReactionType_Avalability> ReactionTime_ReactionType_Avalability { get; set; }
        public virtual DbSet<ReactionType> ReactionTypes { get; set; }
        public virtual DbSet<ServiceLocation> ServiceLocations { get; set; }
        public virtual DbSet<Year> Years { get; set; }
        public virtual DbSet<Year_Availability> Year_Availability { get; set; }
        public virtual DbSet<HwFspCodeTranslation> HwFspCodeTranslations { get; set; }
        public virtual DbSet<SwFspCodeTranslation> SwFspCodeTranslations { get; set; }
        public virtual DbSet<AFR> AFRs { get; set; }
        public virtual DbSet<AfrYear> AfrYears { get; set; }
        public virtual DbSet<AvailabilityFee> AvailabilityFees { get; set; }
        public virtual DbSet<FieldServiceCost> FieldServiceCosts { get; set; }
        public virtual DbSet<HddRetention> HddRetentions { get; set; }
        public virtual DbSet<InstallBase> InstallBases { get; set; }
        public virtual DbSet<LogisticsCost> LogisticsCosts { get; set; }
        public virtual DbSet<ManualCost> ManualCosts { get; set; }
        public virtual DbSet<MarkupOtherCost> MarkupOtherCosts { get; set; }
        public virtual DbSet<MarkupStandardWaranty> MarkupStandardWaranties { get; set; }
        public virtual DbSet<MaterialCostOow> MaterialCostOows { get; set; }
        public virtual DbSet<MaterialCostWarranty> MaterialCostWarranties { get; set; }
        public virtual DbSet<ProActive> ProActives { get; set; }
        public virtual DbSet<ProlongationMarkup> ProlongationMarkups { get; set; }
        public virtual DbSet<Reinsurance> Reinsurances { get; set; }
        public virtual DbSet<RoleCodeHourlyRate> RoleCodeHourlyRates { get; set; }
        public virtual DbSet<ServiceSupportCost> ServiceSupportCosts { get; set; }
        public virtual DbSet<TaxAndDuty> TaxAndDuties { get; set; }
        public virtual DbSet<ClusterPla> ClusterPlas { get; set; }
        public virtual DbSet<ClusterRegion> ClusterRegions { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryGroup> CountryGroups { get; set; }
        public virtual DbSet<Pla> Plas { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<RoleCode> RoleCodes { get; set; }
        public virtual DbSet<Sfab> Sfabs { get; set; }
        public virtual DbSet<Sog> Sogs { get; set; }
        public virtual DbSet<SwDigit> SwDigits { get; set; }
        public virtual DbSet<SwDigitLicense> SwDigitLicenses { get; set; }
        public virtual DbSet<SwLicense> SwLicenses { get; set; }
        public virtual DbSet<Wg> Wgs { get; set; }
        public virtual DbSet<Matrix> Matrices { get; set; }
        public virtual DbSet<MatrixMaster> MatrixMasters { get; set; }
        public virtual DbSet<MatrixRule> MatrixRules { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRates { get; set; }
        public virtual DbSet<ProActiveDigit> ProActiveDigits { get; set; }
        public virtual DbSet<ProActiveSw> ProActiveSws { get; set; }
        public virtual DbSet<SwSpMaintenance> SwSpMaintenances { get; set; }
        public virtual DbSet<ReactionTimeAvailability> ReactionTimeAvailabilities { get; set; }
        public virtual DbSet<ReactionTimeType> ReactionTimeTypes { get; set; }
        public virtual DbSet<ReactionTimeTypeAvailability> ReactionTimeTypeAvailabilities { get; set; }
        public virtual DbSet<YearAvailability> YearAvailabilities { get; set; }
        public virtual DbSet<AvailabilityFeeCalcView> AvailabilityFeeCalcViews { get; set; }
        public virtual DbSet<AvailabilityFeeView> AvailabilityFeeViews { get; set; }
        public virtual DbSet<FieldServiceCostView> FieldServiceCostViews { get; set; }
        public virtual DbSet<HddRetByDurationView> HddRetByDurationViews { get; set; }
        public virtual DbSet<LogisticsCostView> LogisticsCostViews { get; set; }
        public virtual DbSet<MarkupOtherCostsView> MarkupOtherCostsViews { get; set; }
        public virtual DbSet<MarkupStandardWarantyView> MarkupStandardWarantyViews { get; set; }
        public virtual DbSet<ProActiveView> ProActiveViews { get; set; }
        public virtual DbSet<ReinsuranceView> ReinsuranceViews { get; set; }
        public virtual DbSet<ServiceSupportCostView> ServiceSupportCostViews { get; set; }
        public virtual DbSet<TaxAndDutiesVIEW> TaxAndDutiesVIEWs { get; set; }
        public virtual DbSet<CountryView> CountryViews { get; set; }
        public virtual DbSet<WgSogView> WgSogViews { get; set; }
        public virtual DbSet<WgView> WgViews { get; set; }
        public virtual DbSet<ProActiveView1> ProActiveView1 { get; set; }
        public virtual DbSet<ServiceCostCalculationView> ServiceCostCalculationViews { get; set; }
        public virtual DbSet<SwSpMaintenanceCostView> SwSpMaintenanceCostViews { get; set; }
        public virtual DbSet<SwSpMaintenanceView> SwSpMaintenanceViews { get; set; }
    
        [DbFunction("ScdEntities", "GetCalcMember")]
        public virtual IQueryable<GetCalcMember_Result> GetCalcMember(Nullable<bool> approved, Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc, Nullable<long> lastid, Nullable<int> limit)
        {
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            var lastidParameter = lastid.HasValue ?
                new ObjectParameter("lastid", lastid) :
                new ObjectParameter("lastid", typeof(long));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCalcMember_Result>("[ScdEntities].[GetCalcMember](@approved, @cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc, @lastid, @limit)", approvedParameter, cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter, lastidParameter, limitParameter);
        }
    
        [DbFunction("ScdEntities", "GetCosts")]
        public virtual IQueryable<GetCosts_Result> GetCosts(Nullable<bool> approved, Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc, Nullable<long> lastid, Nullable<int> limit)
        {
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            var lastidParameter = lastid.HasValue ?
                new ObjectParameter("lastid", lastid) :
                new ObjectParameter("lastid", typeof(long));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCosts_Result>("[ScdEntities].[GetCosts](@approved, @cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc, @lastid, @limit)", approvedParameter, cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter, lastidParameter, limitParameter);
        }
    
        [DbFunction("ScdEntities", "GetCostsFull")]
        public virtual IQueryable<GetCostsFull_Result> GetCostsFull(Nullable<bool> approved, Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc, Nullable<long> lastid, Nullable<int> limit)
        {
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("approved", approved) :
                new ObjectParameter("approved", typeof(bool));
    
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            var lastidParameter = lastid.HasValue ?
                new ObjectParameter("lastid", lastid) :
                new ObjectParameter("lastid", typeof(long));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCostsFull_Result>("[ScdEntities].[GetCostsFull](@approved, @cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc, @lastid, @limit)", approvedParameter, cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter, lastidParameter, limitParameter);
        }
    
        [DbFunction("ScdEntities", "FindMasterRowsByRule")]
        public virtual IQueryable<FindMasterRowsByRule_Result> FindMasterRowsByRule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FindMasterRowsByRule_Result>("[ScdEntities].[FindMasterRowsByRule]()");
        }
    
        [DbFunction("ScdEntities", "FindRowsByRule")]
        public virtual IQueryable<FindRowsByRule_Result> FindRowsByRule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FindRowsByRule_Result>("[ScdEntities].[FindRowsByRule]()");
        }
    
        [DbFunction("ScdEntities", "GenRules")]
        public virtual IQueryable<GenRules_Result> GenRules(Nullable<long> cnt, Nullable<bool> globalPortfolio, Nullable<bool> masterPortfolio, Nullable<bool> corePortfolio)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var globalPortfolioParameter = globalPortfolio.HasValue ?
                new ObjectParameter("globalPortfolio", globalPortfolio) :
                new ObjectParameter("globalPortfolio", typeof(bool));
    
            var masterPortfolioParameter = masterPortfolio.HasValue ?
                new ObjectParameter("masterPortfolio", masterPortfolio) :
                new ObjectParameter("masterPortfolio", typeof(bool));
    
            var corePortfolioParameter = corePortfolio.HasValue ?
                new ObjectParameter("corePortfolio", corePortfolio) :
                new ObjectParameter("corePortfolio", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GenRules_Result>("[ScdEntities].[GenRules](@cnt, @globalPortfolio, @masterPortfolio, @corePortfolio)", cntParameter, globalPortfolioParameter, masterPortfolioParameter, corePortfolioParameter);
        }
    
        [DbFunction("ScdEntities", "GetBySla")]
        public virtual IQueryable<GetBySla_Result> GetBySla(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc, Nullable<long> lastid, Nullable<int> limit)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            var lastidParameter = lastid.HasValue ?
                new ObjectParameter("lastid", lastid) :
                new ObjectParameter("lastid", typeof(long));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBySla_Result>("[ScdEntities].[GetBySla](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc, @lastid, @limit)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter, lastidParameter, limitParameter);
        }
    
        [DbFunction("ScdEntities", "GetListOrNull")]
        public virtual IQueryable<GetListOrNull_Result> GetListOrNull()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetListOrNull_Result>("[ScdEntities].[GetListOrNull]()");
        }
    
        [DbFunction("ScdEntities", "CalcOutputNewVsOld")]
        public virtual IQueryable<CalcOutputNewVsOld_Result> CalcOutputNewVsOld(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalcOutputNewVsOld_Result>("[ScdEntities].[CalcOutputNewVsOld](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "CalcOutputVsFREEZE")]
        public virtual IQueryable<CalcOutputVsFREEZE_Result> CalcOutputVsFREEZE(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalcOutputVsFREEZE_Result>("[ScdEntities].[CalcOutputVsFREEZE](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "CalcParameterHw")]
        public virtual IQueryable<CalcParameterHw_Result> CalcParameterHw(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalcParameterHw_Result>("[ScdEntities].[CalcParameterHw](@cnt, @wg, @av, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "CalcParameterProActive")]
        public virtual IQueryable<CalcParameterProActive_Result> CalcParameterProActive(Nullable<long> cnt, Nullable<long> wg)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalcParameterProActive_Result>("[ScdEntities].[CalcParameterProActive](@cnt, @wg)", cntParameter, wgParameter);
        }
    
        [DbFunction("ScdEntities", "Contract")]
        public virtual IQueryable<Contract_Result> Contract(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Contract_Result>("[ScdEntities].[Contract](@cnt, @wg, @av, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "FlatFeeReport")]
        public virtual IQueryable<FlatFeeReport_Result> FlatFeeReport(Nullable<long> cnt, Nullable<long> wg)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FlatFeeReport_Result>("[ScdEntities].[FlatFeeReport](@cnt, @wg)", cntParameter, wgParameter);
        }
    
        [DbFunction("ScdEntities", "GetCalcMember1")]
        public virtual IQueryable<GetCalcMember1_Result> GetCalcMember1(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCalcMember1_Result>("[ScdEntities].[GetCalcMember1](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "GetCosts1")]
        public virtual IQueryable<GetCosts1_Result> GetCosts1(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCosts1_Result>("[ScdEntities].[GetCosts1](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "GetCostsFull1")]
        public virtual IQueryable<GetCostsFull1_Result> GetCostsFull1(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCostsFull1_Result>("[ScdEntities].[GetCostsFull1](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "GetMatrixBySla")]
        public virtual IQueryable<GetMatrixBySla_Result> GetMatrixBySla(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMatrixBySla_Result>("[ScdEntities].[GetMatrixBySla](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "GetMatrixBySlaCountry")]
        public virtual IQueryable<GetMatrixBySlaCountry_Result> GetMatrixBySlaCountry(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMatrixBySlaCountry_Result>("[ScdEntities].[GetMatrixBySlaCountry](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "GetProActiveByCountryAndWg")]
        public virtual IQueryable<GetProActiveByCountryAndWg_Result> GetProActiveByCountryAndWg(string cnt, string wgList)
        {
            var cntParameter = cnt != null ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(string));
    
            var wgListParameter = wgList != null ?
                new ObjectParameter("wgList", wgList) :
                new ObjectParameter("wgList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProActiveByCountryAndWg_Result>("[ScdEntities].[GetProActiveByCountryAndWg](@cnt, @wgList)", cntParameter, wgListParameter);
        }
    
        [DbFunction("ScdEntities", "GetServiceCostsBySla")]
        public virtual IQueryable<GetServiceCostsBySla_Result> GetServiceCostsBySla(string cnt, string loc, string av, string reactiontime, string reactiontype, string wg, string dur)
        {
            var cntParameter = cnt != null ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(string));
    
            var locParameter = loc != null ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(string));
    
            var avParameter = av != null ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(string));
    
            var reactiontimeParameter = reactiontime != null ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(string));
    
            var reactiontypeParameter = reactiontype != null ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(string));
    
            var wgParameter = wg != null ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(string));
    
            var durParameter = dur != null ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetServiceCostsBySla_Result>("[ScdEntities].[GetServiceCostsBySla](@cnt, @loc, @av, @reactiontime, @reactiontype, @wg, @dur)", cntParameter, locParameter, avParameter, reactiontimeParameter, reactiontypeParameter, wgParameter, durParameter);
        }
    
        [DbFunction("ScdEntities", "GetSwResultBySla")]
        public virtual IQueryable<GetSwResultBySla_Result> GetSwResultBySla(Nullable<long> sog, Nullable<long> av, Nullable<long> year)
        {
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSwResultBySla_Result>("[ScdEntities].[GetSwResultBySla](@sog, @av, @year)", sogParameter, avParameter, yearParameter);
        }
    
        [DbFunction("ScdEntities", "HddRetention1")]
        public virtual IQueryable<HddRetention1_Result> HddRetention1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<HddRetention1_Result>("[ScdEntities].[HddRetention1]()");
        }
    
        [DbFunction("ScdEntities", "HddRetentionByCountry")]
        public virtual IQueryable<HddRetentionByCountry_Result> HddRetentionByCountry(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<HddRetentionByCountry_Result>("[ScdEntities].[HddRetentionByCountry](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "HddRetentionCentral")]
        public virtual IQueryable<HddRetentionCentral_Result> HddRetentionCentral(Nullable<long> wg, Nullable<long> dur)
        {
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<HddRetentionCentral_Result>("[ScdEntities].[HddRetentionCentral](@wg, @dur)", wgParameter, durParameter);
        }
    
        [DbFunction("ScdEntities", "HddRetentionParameter")]
        public virtual IQueryable<HddRetentionParameter_Result> HddRetentionParameter(Nullable<long> wg, Nullable<long> year)
        {
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<HddRetentionParameter_Result>("[ScdEntities].[HddRetentionParameter](@wg, @year)", wgParameter, yearParameter);
        }
    
        [DbFunction("ScdEntities", "Locap")]
        public virtual IQueryable<Locap_Result> Locap(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Locap_Result>("[ScdEntities].[Locap](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "LocapDetailed")]
        public virtual IQueryable<LocapDetailed_Result> LocapDetailed(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LocapDetailed_Result>("[ScdEntities].[LocapDetailed](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostCalcCentral")]
        public virtual IQueryable<LogisticCostCalcCentral_Result> LogisticCostCalcCentral(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostCalcCentral_Result>("[ScdEntities].[LogisticCostCalcCentral](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostCalcCountry")]
        public virtual IQueryable<LogisticCostCalcCountry_Result> LogisticCostCalcCountry(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostCalcCountry_Result>("[ScdEntities].[LogisticCostCalcCountry](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostCentral")]
        public virtual IQueryable<LogisticCostCentral_Result> LogisticCostCentral(Nullable<long> cnt, Nullable<long> wg, Nullable<long> reactiontime, Nullable<long> reactiontype)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostCentral_Result>("[ScdEntities].[LogisticCostCentral](@cnt, @wg, @reactiontime, @reactiontype)", cntParameter, wgParameter, reactiontimeParameter, reactiontypeParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostCountry")]
        public virtual IQueryable<LogisticCostCountry_Result> LogisticCostCountry(Nullable<long> cnt, Nullable<long> wg, Nullable<long> reactiontime, Nullable<long> reactiontype)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostCountry_Result>("[ScdEntities].[LogisticCostCountry](@cnt, @wg, @reactiontime, @reactiontype)", cntParameter, wgParameter, reactiontimeParameter, reactiontypeParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostInputCentral")]
        public virtual IQueryable<LogisticCostInputCentral_Result> LogisticCostInputCentral(Nullable<long> cnt, Nullable<long> wg, Nullable<long> reactiontime, Nullable<long> reactiontype)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostInputCentral_Result>("[ScdEntities].[LogisticCostInputCentral](@cnt, @wg, @reactiontime, @reactiontype)", cntParameter, wgParameter, reactiontimeParameter, reactiontypeParameter);
        }
    
        [DbFunction("ScdEntities", "LogisticCostInputCountry")]
        public virtual IQueryable<LogisticCostInputCountry_Result> LogisticCostInputCountry(Nullable<long> cnt, Nullable<long> wg, Nullable<long> reactiontime, Nullable<long> reactiontype)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LogisticCostInputCountry_Result>("[ScdEntities].[LogisticCostInputCountry](@cnt, @wg, @reactiontime, @reactiontype)", cntParameter, wgParameter, reactiontimeParameter, reactiontypeParameter);
        }
    
        [DbFunction("ScdEntities", "PoStandardWarrantyMaterial")]
        public virtual IQueryable<PoStandardWarrantyMaterial_Result> PoStandardWarrantyMaterial(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PoStandardWarrantyMaterial_Result>("[ScdEntities].[PoStandardWarrantyMaterial](@cnt, @wg, @av, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "ProActive1")]
        public virtual IQueryable<ProActive1_Result> ProActive1(Nullable<long> cnt, Nullable<long> wg, Nullable<long> av, Nullable<long> dur, Nullable<long> reactiontime, Nullable<long> reactiontype, Nullable<long> loc)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var wgParameter = wg.HasValue ?
                new ObjectParameter("wg", wg) :
                new ObjectParameter("wg", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var durParameter = dur.HasValue ?
                new ObjectParameter("dur", dur) :
                new ObjectParameter("dur", typeof(long));
    
            var reactiontimeParameter = reactiontime.HasValue ?
                new ObjectParameter("reactiontime", reactiontime) :
                new ObjectParameter("reactiontime", typeof(long));
    
            var reactiontypeParameter = reactiontype.HasValue ?
                new ObjectParameter("reactiontype", reactiontype) :
                new ObjectParameter("reactiontype", typeof(long));
    
            var locParameter = loc.HasValue ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProActive1_Result>("[ScdEntities].[ProActive1](@cnt, @wg, @av, @dur, @reactiontime, @reactiontype, @loc)", cntParameter, wgParameter, avParameter, durParameter, reactiontimeParameter, reactiontypeParameter, locParameter);
        }
    
        [DbFunction("ScdEntities", "SolutionPackPriceList")]
        public virtual IQueryable<SolutionPackPriceList_Result> SolutionPackPriceList(Nullable<long> sog)
        {
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SolutionPackPriceList_Result>("[ScdEntities].[SolutionPackPriceList](@sog)", sogParameter);
        }
    
        [DbFunction("ScdEntities", "SolutionPackPriceListDetail")]
        public virtual IQueryable<SolutionPackPriceListDetail_Result> SolutionPackPriceListDetail(Nullable<long> sog)
        {
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SolutionPackPriceListDetail_Result>("[ScdEntities].[SolutionPackPriceListDetail](@sog)", sogParameter);
        }
    
        [DbFunction("ScdEntities", "SolutionPackProActiveCosting")]
        public virtual IQueryable<SolutionPackProActiveCosting_Result> SolutionPackProActiveCosting(Nullable<long> cnt, Nullable<long> sog, Nullable<long> year)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SolutionPackProActiveCosting_Result>("[ScdEntities].[SolutionPackProActiveCosting](@cnt, @sog, @year)", cntParameter, sogParameter, yearParameter);
        }
    
        [DbFunction("ScdEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[ScdEntities].[SplitString](@stringToSplit)", stringToSplitParameter);
        }
    
        [DbFunction("ScdEntities", "SwServicePriceList")]
        public virtual IQueryable<SwServicePriceList_Result> SwServicePriceList(Nullable<long> sog, Nullable<long> av, Nullable<long> year)
        {
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SwServicePriceList_Result>("[ScdEntities].[SwServicePriceList](@sog, @av, @year)", sogParameter, avParameter, yearParameter);
        }
    
        [DbFunction("ScdEntities", "SwServicePriceListDetail")]
        public virtual IQueryable<SwServicePriceListDetail_Result> SwServicePriceListDetail(Nullable<long> sog, Nullable<long> av, Nullable<long> year)
        {
            var sogParameter = sog.HasValue ?
                new ObjectParameter("sog", sog) :
                new ObjectParameter("sog", typeof(long));
    
            var avParameter = av.HasValue ?
                new ObjectParameter("av", av) :
                new ObjectParameter("av", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SwServicePriceListDetail_Result>("[ScdEntities].[SwServicePriceListDetail](@sog, @av, @year)", sogParameter, avParameter, yearParameter);
        }
    
        public virtual int GetAvailabilityFeeCoverageCombination(Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter totalCount)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAvailabilityFeeCoverageCombination", pageSizeParameter, pageNumberParameter, totalCount);
        }
    
        public virtual int AddRules(Nullable<long> cnt, Nullable<bool> globalPortfolio, Nullable<bool> masterPortfolio, Nullable<bool> corePortfolio)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            var globalPortfolioParameter = globalPortfolio.HasValue ?
                new ObjectParameter("globalPortfolio", globalPortfolio) :
                new ObjectParameter("globalPortfolio", typeof(bool));
    
            var masterPortfolioParameter = masterPortfolio.HasValue ?
                new ObjectParameter("masterPortfolio", masterPortfolio) :
                new ObjectParameter("masterPortfolio", typeof(bool));
    
            var corePortfolioParameter = corePortfolio.HasValue ?
                new ObjectParameter("corePortfolio", corePortfolio) :
                new ObjectParameter("corePortfolio", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRules", cntParameter, globalPortfolioParameter, masterPortfolioParameter, corePortfolioParameter);
        }
    
        public virtual int AllowMasterRows()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllowMasterRows");
        }
    
        public virtual int AllowRows()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllowRows");
        }
    
        public virtual int DelRules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelRules");
        }
    
        public virtual int DenyMasterRows(Nullable<bool> globalPortfolio, Nullable<bool> masterPortfolio, Nullable<bool> corePortfolio)
        {
            var globalPortfolioParameter = globalPortfolio.HasValue ?
                new ObjectParameter("globalPortfolio", globalPortfolio) :
                new ObjectParameter("globalPortfolio", typeof(bool));
    
            var masterPortfolioParameter = masterPortfolio.HasValue ?
                new ObjectParameter("masterPortfolio", masterPortfolio) :
                new ObjectParameter("masterPortfolio", typeof(bool));
    
            var corePortfolioParameter = corePortfolio.HasValue ?
                new ObjectParameter("corePortfolio", corePortfolio) :
                new ObjectParameter("corePortfolio", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DenyMasterRows", globalPortfolioParameter, masterPortfolioParameter, corePortfolioParameter);
        }
    
        public virtual int DenyRows(Nullable<long> cnt)
        {
            var cntParameter = cnt.HasValue ?
                new ObjectParameter("cnt", cnt) :
                new ObjectParameter("cnt", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DenyRows", cntParameter);
        }
    }
}
