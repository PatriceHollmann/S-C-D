// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Gdc.Scd.Import.Por.Core.Scripts
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class UpdateMarkupOtherCosts : BaseUpdateCost
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\ndeclare @wg dbo.ListID;\r\ninsert into @wg(id) select id from InputAtoms.Wg where" +
                    " Deactivated = 0 and UPPER(name) in (");
            
            #line 4 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
 PrintNames(); 
            
            #line default
            #line hidden
            this.Write(@")

IF OBJECT_ID('tempdb..#tmp') IS NOT NULL DROP TABLE #tmp;
IF OBJECT_ID('tempdb..#tmpMin') IS NOT NULL DROP TABLE #tmpMin;

select c.* into #tmp
from Hardware.MarkupOtherCosts c
where c.Deactivated = 0 and not exists(select * from @wg where Id = c.Wg)

create index ix_tmp_Country_SLA on #tmp(Country, ");
            
            #line 13 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(", ReactionTimeTypeAvailability);\r\n\r\nselect    t.Country\r\n        , t.");
            
            #line 16 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(@"
        , t.ReactionTimeTypeAvailability

        , case when min(Markup) = max(Markup) then min(Markup) else null end as Markup
        , case when min(Markup_Approved) = max(Markup_Approved) then min(Markup_Approved) else null end as Markup_Approved
        , case when min(MarkupFactor) = max(MarkupFactor) then min(MarkupFactor) else null end as MarkupFactor
        , case when min(MarkupFactor_Approved) = max(MarkupFactor_Approved) then min(MarkupFactor_Approved) else null end as MarkupFactor_Approved
        , case when min(ProlongationMarkup) = max(ProlongationMarkup) then min(ProlongationMarkup) else null end as ProlongationMarkup
        , case when min(ProlongationMarkup_Approved) = max(ProlongationMarkup_Approved) then min(ProlongationMarkup_Approved) else null end as ProlongationMarkup_Approved
        , case when min(ProlongationMarkupFactor) = max(ProlongationMarkupFactor) then min(ProlongationMarkupFactor) else null end as ProlongationMarkupFactor
        , case when min(ProlongationMarkupFactor_Approved) = max(ProlongationMarkupFactor_Approved) then min(ProlongationMarkupFactor_Approved) else null end as ProlongationMarkupFactor_Approved

into #tmpMin
from #tmp t
group by t.Country, t.");
            
            #line 30 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(", t.ReactionTimeTypeAvailability;\r\n\r\ncreate index ix_tmpmin_Country_SLA on #tmp(C" +
                    "ountry, ");
            
            #line 32 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(@", ReactionTimeTypeAvailability);

update c set
      Markup = coalesce(t.Markup, c.Markup)
    , Markup_Approved = coalesce(t.Markup_Approved, c.Markup_Approved)
    , MarkupFactor = coalesce(t.MarkupFactor, c.MarkupFactor)
    , MarkupFactor_Approved = coalesce(t.MarkupFactor_Approved, c.MarkupFactor_Approved)
    , ProlongationMarkup = coalesce(t.ProlongationMarkup, c.ProlongationMarkup)
    , ProlongationMarkup_Approved = coalesce(t.ProlongationMarkup_Approved, c.ProlongationMarkup_Approved)
    , ProlongationMarkupFactor = coalesce(t.ProlongationMarkupFactor, c.ProlongationMarkupFactor)
    , ProlongationMarkupFactor_Approved = coalesce(t.ProlongationMarkupFactor_Approved, c.ProlongationMarkupFactor_Approved)

from Hardware.MarkupOtherCosts c
inner join #tmpMin t on t.Country = c.Country and t.");
            
            #line 45 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(" = c.");
            
            #line 45 "C:\Dev\SCD\Gdc.Scd.Import.Por.Core\Scripts\UpdateMarkupOtherCosts.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.field));
            
            #line default
            #line hidden
            this.Write(@" and t.ReactionTimeTypeAvailability = c.ReactionTimeTypeAvailability
where c.Deactivated = 0 and exists(select * from @wg where Id = c.Wg);

IF OBJECT_ID('tempdb..#tmp') IS NOT NULL DROP TABLE #tmp
IF OBJECT_ID('tempdb..#tmpMin') IS NOT NULL DROP TABLE #tmpMin;


");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
